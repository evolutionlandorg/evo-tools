#!/usr/bin/env bash

set -eo pipefail

config-init() {
    path=${DEPLOY_CONFIG:-$1}
    if [[ ! -e "$path" ]]; then
      echo "Config file not found: $path not found"
      exit 1
    fi
    export ADDRESSES_FILE=$path
    local exports
    exports=$(cat $path | jq -r ".deploy_data // . | \
      to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
    for e in $exports; do export "$e"; done
}

GREEN='\033[0;32m'
NC='\033[0m' # No Color

log() {
    printf '%b\n' "${GREEN}${1}${NC}"
    echo ""
}

toUpper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

toLower() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

addAddress() {
    if [ -z "$1" ] || [ -z "$2" ] 
      then
        echo "addAddress: No argument supplied"
        exit 1
    fi
    cat "$ADDRESSES_FILE" | jq --arg key "$1" --arg value "$2" '.[$key] = $value' | sponge "$ADDRESSES_FILE"
    log "$1=$2"
}

loadAddresses() {
    local exports
    exports=$(cat $ADDRESSES_FILE | jq -r ".deploy_data // . | \
        to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
    for e in $exports; do export "$e"; done
}

if  [[ -e .env ]]; then
    . .env
fi

if [[ "$DEPLOY_CHAIN?" ]]; then  
  case "$DEPLOY_CHAIN" in
    mainnet)
      config-init "${PWD}/bin/conf/mainnet.json";
      ;;
    ropsten)
      config-init "${PWD}/bin/conf/ropsten.json";
      ;;
    pangolin)
      config-init "${PWD}/bin/conf/pangolin.json";
      ;;
    heco-test)
      config-init "${PWD}/bin/conf/heco-test.json";
      ;;
    bsc-test)
      config-init "${PWD}/bin/conf/bsc-test.json";
      ;;
    *)
      exit 1
  esac
fi

